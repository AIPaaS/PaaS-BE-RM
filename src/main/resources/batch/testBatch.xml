<?xml version="1.0" encoding="UTF-8"?> 
<beans:beans xmlns ="http://www.springframework.org/schema/batch" 
xmlns:beans="http://www.springframework.org/schema/beans"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.springframework.org/schema/beans 
http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
http://www.springframework.org/schema/batch 
http://www.springframework.org/schema/batch/spring-batch-3.0.xsd">
	<beans:import resource="context.xml" />
	<beans:bean id="ansibleHostsConfig" class="com.ai.paas.cpaas.rm.manage.service.zookeeper.AnsibleHostsConfig"/>
	<beans:bean id="changeHostNameStep" class="com.ai.paas.cpaas.rm.manage.service.zookeeper.ChangeHostNameStep"/> 
	<beans:bean id="configHostsStep" class="com.ai.paas.cpaas.rm.manage.service.zookeeper.ConfigHostsStep"/> 
	<beans:bean id="genZkUserStep" class="com.ai.paas.cpaas.rm.manage.service.zookeeper.GenZkUser"/>
	<beans:bean id="openZkPortStep" class="com.ai.paas.cpaas.rm.manage.service.zookeeper.OpenZkPort"/>
	<beans:bean id="modifyZkConfStep" class="com.ai.paas.cpaas.rm.manage.service.zookeeper.ModifyZkConf"/>
	<beans:bean id="startZkServiceStep" class="com.ai.paas.cpaas.rm.manage.service.zookeeper.StartZkService"/>
	<beans:bean id="zookeeperVerifyStep" class="com.ai.paas.cpaas.rm.manage.service.zookeeper.ZookeeperVerify"/>
	<beans:bean id="dockerInstallService" class="com.ai.paas.cpaas.rm.manage.service.docker.DockerInstallService"/> 
	<beans:bean id="dockerVerify" class="com.ai.paas.cpaas.rm.manage.service.docker.DockerVerify"/>
	<beans:bean id="genMaUser" class="com.ai.paas.cpaas.rm.manage.service.marathon.GenMaUser"/> 
	<beans:bean id="openMaPort" class="com.ai.paas.cpaas.rm.manage.service.marathon.OpenMaPort"/> 
	<beans:bean id="maInstall" class="com.ai.paas.cpaas.rm.manage.service.marathon.MaInstall"/> 
	<beans:bean id="maStart" class="com.ai.paas.cpaas.rm.manage.service.marathon.MaStart"/> 
	<beans:bean id="maServiceVerify" class="com.ai.paas.cpaas.rm.manage.service.marathon.MaServiceVerify"/> 	
	<beans:bean id="meUser" class="com.ai.paas.cpaas.rm.manage.service.mesos.MeUser"/>
	<beans:bean id="meMasterInstall" class="com.ai.paas.cpaas.rm.manage.service.mesos.MeMasterInstall"/>
	<beans:bean id="meMasterOpenPort" class="com.ai.paas.cpaas.rm.manage.service.mesos.MasterOpenPort"/>
	<beans:bean id="meMasterStart" class="com.ai.paas.cpaas.rm.manage.service.mesos.MeMasterStart"/>
	<beans:bean id="meSlaveStep" class="com.ai.paas.cpaas.rm.manage.service.mesos.MesosSlaveStep"/>
	<beans:bean id="meServiceVerify" class="com.ai.paas.cpaas.rm.manage.service.mesos.MeServiceVerify"/>
	<beans:bean id="openEtcdPort" class="com.ai.paas.cpaas.rm.manage.service.etcd.OpenEtcdPort"/>
	<beans:bean id="genEtcdUser" class="com.ai.paas.cpaas.rm.manage.service.etcd.GenEtcdUser"/>
	<beans:bean id="etcdInstall" class="com.ai.paas.cpaas.rm.manage.service.etcd.EtcdInstall"/>
	<beans:bean id="etcdStart" class="com.ai.paas.cpaas.rm.manage.service.etcd.EtcdStart"/>
	<beans:bean id="configFlannelParam" class="com.ai.paas.cpaas.rm.manage.service.etcd.ConfigFlannelParam"/>
	<beans:bean id="flannelInstall" class="com.ai.paas.cpaas.rm.manage.service.flannel.FlannelInstall"/>
	<beans:bean id="openflannelPort" class="com.ai.paas.cpaas.rm.manage.service.flannel.OpenFlannelPort"/>
	<beans:bean id="mesosDnsInstall" class="com.ai.paas.cpaas.rm.manage.service.mesosdns.MesosDnsInstall"/>	
	<beans:bean id="configDNS" class="com.ai.paas.cpaas.rm.manage.service.mesosdns.ConfigDNS"/>
	<beans:bean id="haproxyInstall" class="com.ai.paas.cpaas.rm.manage.service.haproxy.HaproxyInstall"/>
	<beans:bean id="genHaUser" class="com.ai.paas.cpaas.rm.manage.service.haproxy.GenHaUser"/>
	<beans:bean id="genChronosUser" class="com.ai.paas.cpaas.rm.manage.service.chronos.GenChronosUser"/>
	<beans:bean id="chronosInstall" class="com.ai.paas.cpaas.rm.manage.service.chronos.ChronosInstall"/>
	<beans:bean id="openChronosPort" class="com.ai.paas.cpaas.rm.manage.service.chronos.OpenChronosPort"/>
	<beans:bean id="verifyChronos" class="com.ai.paas.cpaas.rm.manage.service.chronos.VerifyChronos"/>
	<beans:bean id="genConUser" class="com.ai.paas.cpaas.rm.manage.service.consul.GenConUser"/>
	<beans:bean id="openConsulPort" class="com.ai.paas.cpaas.rm.manage.service.consul.OpenConsulPort"/>
	<beans:bean id="consulInstall" class="com.ai.paas.cpaas.rm.manage.service.consul.ConsulInstall"/>
	<beans:bean id="consulStart" class="com.ai.paas.cpaas.rm.manage.service.consul.ConsulStart"/>	
	<beans:bean id="restartKa" class="com.ai.paas.cpaas.rm.manage.service.cluster.RestartKa"/>
	<beans:bean id="insertClusterInfo" class="com.ai.paas.cpaas.rm.manage.service.cluster.InsertClusterInfo"/>
	<beans:bean id="configHa" class="com.ai.paas.cpaas.rm.manage.service.cluster.ConfigHa"/>
	<job id="openService" xmlns="http://www.springframework.org/schema/batch">
		<flow id="insertCluster" parent="cluster"/>
	</job>
	<flow id="cluster">
		<step id="clusterStep" next="configHaStep">
			<tasklet ref="insertClusterInfo"/>
		</step>		
		<step id="configHaStep" next="restartKaStep">
			<tasklet ref="configHa"/>
		</step>
		<step id="restartKaStep">
			<tasklet ref="restartKa"/>
		</step>
	</flow>
</beans:beans>